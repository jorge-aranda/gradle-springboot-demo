buildscript {
	ext {
		springBootVersion = '1.4.3.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:" +
				"${springBootVersion}")

        // Utilizaci√≥n de Docker con Spring Boot
        classpath('com.bmuschko:gradle-docker-plugin:3.0.5')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'gradle-springboot-demo'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-amqp')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-integration')
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

/* DOCKER */

apply plugin: 'com.bmuschko.docker-remote-api'

// Generates a docker image with latest APP version
task buildDocker(type: DockerBuildImage, dependsOn: build) {
	dockerFile = file('src/main/docker/Dockerfile')
    tag = 'latest'
}

// Executes a container into local system using port 8080
task runDocker(type: DockerCreateContainer, dependsOn: buildDocker) {
    targetImageId { buildDocker.getImageId() }
    tag = 'latest'
    portBindings = ['8080:8080']
}

/* DOCKER */